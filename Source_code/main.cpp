#include "utilities.h"
/*
		  ===============
		  |C++ sz√≠nk√≥dok|
		  ===============
 
1		Blue	9	Light Blue
2		Green	0	Black
3		Aqua	A	Light Green
4		Red		B	Light Aqua
5		Purple	C	Light Red
6		Yellow	D	Light Purple
7		White	E	Light Yellow
8		Gray	F	Bright White
*/



int main(){
	system("cls");
	SetConsoleOutputCP(CP_UTF8); 						// UTF-8 karakterek megjelen√≠t√©se
	SetConsoleCP(1250);
	CONSOLE_CURSOR_INFO info;							
    info.dwSize = 100;
    info.bVisible = false;								
    SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);	// Kurzor villog√°s√°nak elt≈±ntet√©se
	string playerName;									// J√°t√©kos neve
	int dodgeChance = 150;
	float dodgePercent = dodgeChance / 5;				// Kit√©r√©s es√©lye (alap√©rtelmezett 30%)										
	int i = 0;											// Ciklusv√°ltoz√≥ (akkor n≈ë, ha egy sz√∂rny meghal)
	int pressedChar, combatOption, pickDoor,			// K√ºl√∂nb√∂z≈ë v√°ltoz√≥k felhaszn√°l√≥i bemenet ellen≈ërz√©s√©re
	pickDebuff, pickShopItems;
	int bossHeight, doorHeight, doorLeftHeight,			
	shopASCII, debuffsASCII;							// K√ºl√∂nb√∂z≈ë ASCII artok magass√°g√°nak megsz√°mol√°s√°ra
	bool gameOver = false, itemPicked;					// gameOver akkor igaz, ha a j√°t√©kos meghal, itemPicked v√°ltoz√≥t boltn√°l √©s kij√°ratn√°l haszn√°ljuk
	vector<Bosses> allBosses = generateBoss("../Enemies");			// Sz√∂rnyek
	vector<ShopItems> shopGoods = shopSystem("../txtFiles/shop.txt");			// √Åruk (bolt)
	int shopRefresh = 300;								// √Åruk friss√≠t√©s√©nek k√∂lts√©ge	
	vector<Debuffs> debuffs = debuffSystem("../txtFiles/debuffs.txt");			// Kij√°rat (gyeng√≠t√©sek)
	shuffleArray(shopGoods);
	shuffleArray(debuffs);
	cout << "J√°t√©kos neve: "; getline(cin,playerName);
	playerName[0] = toupper(playerName[0]);				// Nagy kezd≈ëbet≈± a neveknek (cctype)
	Player player(1500,300,50,10000,5);						// J√°t√©kos(√©let,sebz√©s,p√°nc√©l,arany,kulcsok)
	readFile("../txtFiles/bevezeto.txt",2);				// Bevezet≈ë f√°jl beolvas√°sa
	system("pause");
	system("cls");
	// F≈ë ciklus
	do
	{
		bossHeight = 0;
		doorHeight = 0;
		doorLeftHeight = 0;
		shopASCII = 0;
		debuffsASCII = 0;
		dodgePercent = (dodgeChance / 5);
		BlockInput(false);	/* User input enged√©lyez√©se (BlockInput f√ºggv√©ny haszn√°lata 
							   rendszergazdak√©nt val√≥ futtat√°st ig√©nyel, an√©lk√ºl nem m≈±k√∂dik) */
		system("cls");
		doorHeight = readFile("../txtFiles/doors.txt", 7, "\t\t\t\t", doorHeight);	// Ajt√≥k beolvas√°sa f√°jlb√≥l
		newLine();
		newLine();
		newLine();
		SetConsoleOutputCP(1250);	// UTF-8 v√°ltoz√≥b√≥l ki√≠rat√°shoz
		cout << "\t\t\t\t" << playerName;
		SetConsoleOutputCP(65001);	// UTF-8 √°ltal√°nos ki√≠rat√°shoz
		cout << ", " << "v√°lassz egy ajt√≥t jobb vagy bal ny√≠l haszn√°lat√°val!" << endl;
		newLine();
		cout << "\t\t\t\t" << "Arany: " << player.gold << endl;
		cout << "\t\t\t\t" << "Kulcsok: " << player.keys << endl;
		pressedChar = _getch();		// User inputra v√°rakoz√°s, majd a kapott karakter elt√°rol√°sa
		if (pressedChar == 0 || pressedChar == 0xE0) pressedChar = _getch();	// Virtu√°lis karakterek (nyilak) nem 1 √©rt√©ket adnak vissza, ez√©rt plusz ellen≈ërz√©s sz√ºks√©ges
		if(pressedChar == LEFT && i < allBosses.size()){			// ----Bal ajt√≥ v√°laszt√°sa----
			setCursorPosition(0,0);	/*
									Kurzor poz√≠ci√≥ja (innen kezd≈ëdik a nyomtat√°s)
									A program m≈±k√∂d√©s√©nek egyik f≈ë eleme. Ha nem fel√ºl√≠rn√°nk a nyomtatott karaktereket,
									hanem minden k√©pfriss√≠t√©sn√©l t√∂r√∂ln√©nk az eg√©sz kimenetet, akkor minden egyes alkalommal
									villanna egyet a k√©p, ami nagyon zavar√≥. Ezzel a m√≥dszerrel ezt kik√ºsz√∂b√∂lt√ºk, csak az
									v√°ltozik, aminek az adott pillanatban sz√ºks√©ges.
									*/
			doorLeftHeight = readFile("../txtFiles/doorsLeft.txt", 7, "\t\t\t\t", doorLeftHeight);
			Sleep(1500);
			system("cls");
			do
			{
			setCursorPosition(0,0);
			itemPicked = false;
			readFile("../txtFiles/doors.txt", 7, "\t\t\t\t");
			newLine();
			newLine();
			cout << "\t\t\t\t\t\t\t\t\tBolt" << "\t\t\t\t\t\t\t\t\t" << "Kij√°rat" << endl;
			pickDoor = _getch();
			if (pickDoor == 0 || pickDoor == 0xE0) pickDoor = _getch();
			// ---- Bolt ----
			if(pickDoor == LEFT){
				if(player.keys>0){	// Csak akkor enged be, ha a j√°t√©kos rendelkezik kulccsal
				player.keys--;		// Bel√©p√©s ut√°n 1 kulcs elveszik
					if(shopGoods.size() > 5){
						do
						{
							shuffleArray(shopGoods);	// Az √°rukat t√°rol√≥ vektor √∂sszekever√©se
						} while ((shopGoods[0].type == shopGoods[1].type) ||
								(shopGoods[0].type == shopGoods[2].type) ||
								(shopGoods[1].type == shopGoods[2].type));	 
							}
					else {shuffleArray(shopGoods);}
				
				setCursorPosition(0,0);
				readFile("../txtFiles/doorsLeft.txt", 7, "\t\t\t\t");	
				Sleep(2000);
				system("cls");
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ √ÅRUK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				setCursorPosition(0,2);
				shopASCII = readFile("../txtFiles/shopASCII.txt", 7, "\t\t\t", shopASCII);	// Bolt men√º beolvas√°sa
				readFile("../txtFiles/shopASCII.txt", 7, "\t\t\t");	
				readFile("../txtFiles/shopASCII.txt", 7, "\t\t\t");
				int shopASCIIRows = countRows("../txtFiles/shopASCII.txt");
				setCursorPosition(shopASCIIRows + 13, (shopASCII / 2) + 4);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
				cout << "\t\t\t\t" << shopGoods[0].name << " (" << shopGoods[0].price << " arany) " << '[' << shopGoods[0].attribute << ']' << endl;
				setCursorPosition(shopASCIIRows + 13, (shopASCII / 2) + 6 + shopASCII);
				cout << "\t\t\t\t" << shopGoods[1].name << " (" << shopGoods[1].price << " arany) " << '[' << shopGoods[1].attribute << ']' << endl;
				setCursorPosition(shopASCIIRows + 13, (shopASCII / 2) + 8 + shopASCII*2);
				cout << "\t\t\t\t" << shopGoods[2].name << " (" << shopGoods[2].price << " arany) " << '[' << shopGoods[2].attribute << ']' << endl;
				setCursorPosition(0,(shopASCII*3) + 9);
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ INTERAKCI√ìK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				setCursorPosition(0,(shopASCII*3) + 13);
				cout << "\t\t\t" << "V√°s√°rl√°s: " <<  shopGoods[0].name <<"(Balra ny√≠l) ü†∞\n\n\t\t\tV√°s√°rl√°s: " << shopGoods[1].name << "(El≈ëre ny√≠l) ü†±\n\n\t\t\tV√°s√°rl√°s: " << shopGoods[2].name << "(Jobbra ny√≠l) ü†≤\n\n\t\t\tFriss√≠t√©s [300 arany] (H√°tra ny√≠l) ü†≥\n\n\t\t\tKil√©p√©s [ESC]\n"; // Instrukci√≥k
				setCursorPosition(0,(shopASCII*3) + 23);
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ STATOK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" << endl;
				cout << "\t\t\t" << "Arany: " << player.gold << "\t√âlet: " << player.health << "\tSebz√©s: " << player.damage << "\tP√°nc√©l: " << player.armor << "\tKit√©r√©s: " << dodgePercent << "%\n" << endl;
				cout << "\t\t\t" << allBosses[i].name << " √©lete: " << allBosses[i].health << "\t" << allBosses[i].name << " sebz√©se: " << allBosses[i].damage << endl;
				Sleep(2000);
				itemPicked = false;	// Am√≠g a v√°ltoz√≥ hamis, nem t√∂rt√©nt interakci√≥
				do
				{
				pickShopItems = _getch();
				if (pickShopItems == 0 || pickShopItems == 0xE0) pickShopItems = _getch();
				switch(pickShopItems){
					case LEFT: {	// Els≈ë √°ru megv√°s√°rl√°sa
						if (player.gold >= shopGoods[0].price){	// Ha a j√°t√©kos p√©nze elegend≈ë, az √°ru megv√°s√°rolhat√≥
							setCursorPosition(0, (shopASCII*3) + 31);
							cout << "\t\t\t" << shopGoods[0].name << " megv√°s√°rolva " << shopGoods[0].price << " arany√©rt!" << endl;
							player.gold-= shopGoods[0].price;	// Arany levon√°sa az √°rnak megfelel≈ëen
							itemPicked=true;					// V√°ltoz√≥ igazra v√°lt, kil√©p√©s a boltb√≥l
							switch (shopGoods[0].type){			// A v√°s√°rolt √°ru t√≠pus√°nak ellen≈ërz√©se
								case 1: player.health += shopGoods[0].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (√âLET)
								case 2: player.damage += shopGoods[0].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (SEBZ√âS)
								case 3: player.armor += shopGoods[0].value; break;		// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (P√ÅNC√âL)
								case 4: player.health = (player.health * shopGoods[0].value / 100); break;		// (√âLET BUFF %)
								case 5: player.damage = (player.damage * shopGoods[0].value / 100); break;		// (SEBZ√âS BUFF %)
								case 6: player.armor = (player.armor * shopGoods[0].value / 100); break; 		// (P√ÅNC√âL BUFF %)
								case 7: dodgeChance = (dodgeChance * shopGoods[0].value / 100); break;			// (KIT√âR√âS BUFF %) 
								case 8: allBosses[i].health = (allBosses[i].health * shopGoods[0].value / 100) ; break; // (SZ√ñRNY √âLET DEBUFF %)
								case 9: allBosses[i].damage = (allBosses[i].damage * shopGoods[0].value / 100) ; break;	// (SZ√ñRNY SEBZ√âS DEBUFF %)
							}
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 28);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\t\t\t" << "Arany: " << player.gold << "\t" << "√âlet: " << player.health << "\t" << "Sebz√©s: " << player.damage << "\t" << "P√°nc√©l: " << player.armor << "\t" << "Kit√©r√©s: " << dodgeChance / 5 << "%\n" << endl;
							cout << "\t\t\t" << allBosses[i].name << " √©lete: " << allBosses[i].health << "\t" << allBosses[i].name << "sebz√©se: " << allBosses[i].damage << endl;
							
							shopGoods.erase(shopGoods.begin()); // V√°s√°rl√°s ut√°n a megv√°s√°rolt √°ru t√∂rl√©se a vektorb√≥l. hogy k√©s≈ëbb ne legyen ism√©tl≈ëd√©s
							Sleep(4000);
						}
						else {	// Ha a j√°t√©kosnak nincs el√©g p√©nze, hiba√ºzenetet kap
							setCursorPosition(0,shopASCII+31);
							cout << "\x1b[2K";
							setCursorPosition(0,shopASCII+31);
							cout << "\t\t\t" << "Tov√°bbi " << shopGoods[0].price - player.gold << " arany sz√ºks√©ges a t√°rgy megv√°s√°rl√°s√°hoz!" << endl;
						}
					} break;
					case UP: {	// M√°sodik √°ru megv√°s√°rl√°sa
						if (player.gold >= shopGoods[1].price){
							setCursorPosition(0, (shopASCII*3) + 31);
							cout << "\t\t\t" << shopGoods[1].name << " megv√°s√°rolva " << shopGoods[1].price << " arany√©rt!" << endl;
							player.gold-= shopGoods[1].price;
							itemPicked=true;
							switch(shopGoods[1].type){
								case 1: player.health += shopGoods[1].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (√âLET)
								case 2: player.damage += shopGoods[1].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (SEBZ√âS)
								case 3: player.armor += shopGoods[1].value; break;		// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (P√ÅNC√âL)
								case 4: player.health = (player.health * shopGoods[1].value / 100); break;		// (√âLET BUFF %)
								case 5: player.damage = (player.damage * shopGoods[1].value / 100); break;		// (SEBZ√âS BUFF %)
								case 6: player.armor = (player.armor * shopGoods[1].value / 100); break; 		// (P√ÅNC√âL BUFF %)
								case 7: dodgeChance = (dodgeChance * shopGoods[1].value / 100); break;			// (KIT√âR√âS BUFF %) 
								case 8: allBosses[i].health = (allBosses[i].health * shopGoods[1].value / 100) ; break; // (SZ√ñRNY √âLET DEBUFF %)
								case 9: allBosses[i].damage = (allBosses[i].damage * shopGoods[1].value / 100) ; break;	// (SZ√ñRNY SEBZ√âS DEBUFF %)
							}
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 28);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\t\t\t" << "Arany: " << player.gold << "\t√âlet: " << player.health << "\tSebz√©s: " << player.damage << "\tP√°nc√©l: " << player.armor << "\tKit√©r√©s: " << dodgeChance / 5 << "%\n" << endl;
							cout << "\t\t\t" << allBosses[i].name << " √©lete: " << allBosses[i].health << "\t" << allBosses[i].name << "sebz√©se: " << allBosses[i].damage << endl;
							shopGoods.erase(shopGoods.begin()+1);
							Sleep(4000);
						}
						else {
							setCursorPosition(0,shopASCII+31);
							cout << "\x1b[2K";
							setCursorPosition(0,shopASCII+31);
							cout << "\t\t\t" << "Tov√°bbi " << shopGoods[1].price - player.gold << " arany sz√ºks√©ges a t√°rgy megv√°s√°rl√°s√°hoz!" << endl;
						}
					} break;
					case RIGHT: {	// Harmadik √°ru megv√°s√°rl√°sa
						if (player.gold >= shopGoods[2].price){
							setCursorPosition(0,(shopASCII*3) + 31);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 31);
							cout << "\t\t\t" << shopGoods[2].name << " megv√°s√°rolva " << shopGoods[2].price << " arany√©rt!" << endl;
							player.gold-= shopGoods[2].price;
							itemPicked=true;
							switch(shopGoods[2].type){
								case 1: player.health += shopGoods[2].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (√âLET)
								case 2: player.damage += shopGoods[2].value; break;	// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (SEBZ√âS)
								case 3: player.armor += shopGoods[2].value; break;		// Ha a v√°s√°rolt √°ru buff, az adott t√≠pus√∫ stat hozz√°ad√≥dik, ha nem akkor kivon√≥dik az eddigi √©rt√©kb≈ël (P√ÅNC√âL)
								case 4: player.health = (player.health * shopGoods[2].value / 100); break;		// (√âLET BUFF %)
								case 5: player.damage = (player.damage * shopGoods[2].value / 100); break;		// (SEBZ√âS BUFF %)
								case 6: player.armor = (player.armor * shopGoods[2].value / 100); break; 		// (P√ÅNC√âL BUFF %)
								case 7: dodgeChance = (dodgeChance * shopGoods[2].value / 100); break;			// (KIT√âR√âS BUFF %) 
								case 8: allBosses[i].health = (allBosses[i].health * shopGoods[2].value / 100) ; break; // (SZ√ñRNY √âLET DEBUFF %)
								case 9: allBosses[i].damage = (allBosses[i].damage * shopGoods[2].value / 100) ; break;	// (SZ√ñRNY SEBZ√âS DEBUFF %)
							}
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 28);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\t\t\t" << "Arany: " << player.gold << "\t√âlet: " << player.health << "\tSebz√©s: " << player.damage << "\tP√°nc√©l: " << player.armor << "\tKit√©r√©s: " << dodgeChance / 5 << "%\n" << endl;
							cout << "\t\t\t" << allBosses[i].name << " √©lete: " << allBosses[i].health << "\t" << allBosses[i].name << "sebz√©se: " << allBosses[i].damage << endl;
							shopGoods.erase(shopGoods.begin()+2);
							Sleep(4000);
						}
						else {
							setCursorPosition(0,shopASCII+31);
							cout << "\x1b[2K";
							setCursorPosition(0,shopASCII+31);
							cout << "\t\t\t" << "Tov√°bbi " << shopGoods[2].price - player.gold << " arany sz√ºks√©ges a t√°rgy megv√°s√°rl√°s√°hoz!" << endl;
						}
					} break;
					case DOWN: {	// Bolt friss√≠t√©se
						if(player.gold >= shopRefresh) { // Ha a j√°t√©kosnak van el√©g p√©nze, friss√≠theti az √°rukat
							player.gold -= shopRefresh;	 // Az arany levon√≥dik friss√≠t√©s ut√°n
							if(shopGoods.size() > 5){
							do
							{
								shuffleArray(shopGoods);	// Az √°rukat t√°rol√≥ vektor √∂sszekever√©se
							} while ((shopGoods[0].type == shopGoods[1].type) ||
									(shopGoods[0].type == shopGoods[2].type) ||
									(shopGoods[1].type == shopGoods[2].type));	 
							}
							else {shuffleArray(shopGoods);}
							setCursorPosition(shopASCIIRows + 25, (shopASCII / 2) + 4);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
								cout << "                                                                                                ";
							setCursorPosition(shopASCIIRows + 25, (shopASCII / 2) + 4);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
								cout << "\t\t\t" << shopGoods[0].name << " (" << shopGoods[0].price << " arany) " << '[' << shopGoods[0].attribute << ']' << endl;
								setCursorPosition(shopASCIIRows + 25, (shopASCII / 2) + 6 + shopASCII);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
									cout << "                                                                                                ";
								setCursorPosition(shopASCIIRows + 22, (shopASCII / 2) + 6 + shopASCII);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
									cout << "\t\t\t" << shopGoods[1].name << " (" << shopGoods[1].price << " arany) " << '[' << shopGoods[1].attribute << ']' << endl;
									setCursorPosition(shopASCIIRows + 25, (shopASCII / 2) + 8 + shopASCII * 2);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
										cout << "                                                                                                ";
									setCursorPosition(shopASCIIRows + 25, (shopASCII / 2) + 8 + shopASCII * 2);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
										cout << "\t\t\t" <<  shopGoods[2].name << " (" << shopGoods[2].price << " arany) " << '[' << shopGoods[2].attribute << ']' << endl;							
							setCursorPosition(0,(shopASCII*3) + 13);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 15);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 17);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 13);
							cout << "\t\t\t" << "V√°s√°rl√°s: " << shopGoods[0].name <<"(Balra ny√≠l) ü†∞";
							setCursorPosition(0,(shopASCII*3) + 15);
							cout << "\t\t\t" << "V√°s√°rl√°s: " << shopGoods[1].name << "(El≈ëre ny√≠l) ü†±";
							setCursorPosition(0,(shopASCII*3) + 17);
							cout <<"\t\t\t" << "V√°s√°rl√°s: " << shopGoods[2].name << "(Jobbra ny√≠l) ü†≤";
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\x1b[2K";
							setCursorPosition(0,(shopASCII*3) + 27);
							cout << "\t\t\t" << "Arany: " << player.gold << "\t√âlet: " << player.health << "\tSebz√©s: " << player.damage << "\tP√°nc√©l: " << player.armor << "\tKit√©r√©s: " << dodgeChance / 5 << "%\n" << endl;
						}
						else {	// Ha nincs elegend≈ë arany a friss√≠t√©shez, a j√°t√©kos hiba√ºzenetet kap
							cout << "\t\t\t\t" << "Tov√°bbi " << shopRefresh - player.gold << " arany sz√ºks√©ges az √°ruk friss√≠t√©s√©hez!" << endl;
						}
					} break;	
					case ESC: {	// Kil√©p√©s a boltb√≥l, ha semmire sem elegend≈ë a j√°t√©kos aranya  
							cout << "\t\t\t\t" << "Kil√©p√©s!" << endl;
							itemPicked=true;
					} break;
					default: {	// Ha a felsorolt gombok k√∂z√ºl egyiket sem nyomta meg a j√°t√©kos, hiba√ºzenetet kap, ami 1.5s m√∫lva el is t≈±nik
						setCursorPosition(0,shopASCII+28);
						cout << "Helytelen input!" << endl;
						Sleep(1500);
						setCursorPosition(0,shopASCII+28);
						cout << "\x1b[2K";
						} break;
				}
				} while (!itemPicked);	// do-while ciklus v√©ge (BOLT)
				}
				else {	// Ha a j√°t√©kosnak nincs 1 kulcsa sem, nem l√©phet be a boltba
					setCursorPosition(0,doorHeight+6);
					cout << "\t\t\t\tNincs elegend≈ë kulcs a bel√©p√©shez!" << endl;
					Sleep(1500);
					setCursorPosition(0,doorHeight+6);
					cout << "\x1b[2K";
					}
					shuffleArray(shopGoods);	// √Årukat t√°rol√≥ vektor elemeinek √∂sszekever√©se, hogy a k√∂vetkez≈ë megnyit√°sn√°l m√°s √°ruk legyenek
				}
			// ---- Kij√°rat ----
			else if(pickDoor == RIGHT){
				if(debuffs.size() > 5){
					do
					{
						shuffleArray(debuffs);	// Az √°rukat t√°rol√≥ vektor √∂sszekever√©se
					} while ((debuffs[0].type == debuffs[1].type) ||
							(debuffs[0].type == debuffs[2].type) ||
							(debuffs[1].type == debuffs[2].type));	 
					}
				else {shuffleArray(debuffs);}
				setCursorPosition(0,0);
				readFile("../txtFiles/doorsRight.txt", 7, "\t\t\t\t");
				Sleep(2000);
				system("cls");
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ GYENG√çT√âSEK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				setCursorPosition(0,2);
				debuffsASCII = readFile("../txtFiles/debuffsASCII.txt", 4, "\t\t\t", debuffsASCII);					// Gyeng√≠t√©sekhez tartoz√≥ ASCII-k beolvas√°sa
				readFile("../txtFiles/debuffsASCII.txt", 4, "\t\t\t");
				readFile("../txtFiles/debuffsASCII.txt", 4, "\t\t\t");
				int debuffsASCIIRows = countRows("../txtFiles/debuffsASCII.txt");
				setCursorPosition(debuffsASCIIRows + 13, (debuffsASCII / 2) + 4);	// leghosszabb sor hossza + 4 + tabok sz√°ma (3*3 karakter), sorok sz√°ma / 2 
				cout << "\t\t\t\t" << debuffs[0].name << '[' << debuffs[0].attribute << ']' << endl;
				setCursorPosition(debuffsASCIIRows + 13, (debuffsASCII / 2) + 6 + debuffsASCII);
				cout << "\t\t\t\t" << debuffs[1].name << '[' << debuffs[1].attribute << ']' << endl;
				setCursorPosition(debuffsASCIIRows + 13, (debuffsASCII / 2) + 8 + debuffsASCII*2);
				cout << "\t\t\t\t" << debuffs[2].name << '[' << debuffs[2].attribute << ']' << endl;
				setCursorPosition(0,(debuffsASCII*3) + 9);
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ INTERAKCI√ìK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				setCursorPosition(0,(debuffsASCII*3) + 13);
				cout << "\t\t\t" << "Kiv√°laszt√°s: " <<  debuffs[0].name <<"(Balra ny√≠l) ü†∞\n\n\t\t\tKiv√°laszt√°s: " << debuffs[1].name << "(El≈ëre ny√≠l) ü†±\n\n\t\t\tKiv√°laszt√°s: " << debuffs[2].name << "(Jobbra ny√≠l) ü†≤\n\n\t\t\tKil√©p√©s [ESC]"; // Instrukci√≥k
				setCursorPosition(0,(debuffsASCII*3) + 22);
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
				cout << "\t\t\t" << "‚îÉ STATOK ‚îÉ" << endl;
				cout << "\t\t\t" << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" << endl;
				cout << "\t\t\t" << "Arany: " << player.gold << "\t√âlet: " << player.health << "\tSebz√©s: " << player.damage << "\tP√°nc√©l: " << player.armor << "\tKit√©r√©s: " << dodgePercent << "%\n" << endl;
				cout << "\t\t\t" << allBosses[i].name << " √©lete: " << allBosses[i].health << "\t" << allBosses[i].name << " sebz√©se: " << allBosses[i].damage << endl;
				Sleep(2000);
				do
				{
					pickShopItems = _getch();
					if (pickShopItems == 0 || pickShopItems == 0xE0) pickShopItems = _getch();
					switch(pickShopItems){	// Felsorolt gyeng√≠t√©sek v√°laszt√°s√°hoz sz√ºks√©ges input
						case LEFT: {		// Els≈ë gyeng√≠t√©s v√°laszt√°sa
							player.keys++;	// J√°t√©kos kap 1 kulcsot miut√°n v√°lasztott
							switch(debuffs[0].type){	// Gyeng√≠t√©s t√≠pus√°nak ellen≈ërz√©se (debuffs.txt)
								case 1: player.health = (player.health * debuffs[0].value / 100);				// J√ÅT√âKOS √âLET CS√ñKKENT√âS
								case 2: player.damage = (player.damage * debuffs[0].value / 100);				// J√ÅT√âKOS SEBZ√âS CS√ñKKENT√âS
								case 3: dodgeChance = (dodgeChance * debuffs[0].value / 100);					// J√ÅT√âKOS KIT√âR√âS CS√ñKKENT√âS
								case 4: player.armor = (player.armor * debuffs[0].value / 100);					// J√ÅT√âKOS P√ÅNC√âL CS√ñKKENT√âS
								case 5: allBosses[i].health = (allBosses[i].health * debuffs[0].value / 100);	// SZ√ñRNY √âLET N√ñVEL√âS
								case 6: allBosses[i].damage = (allBosses[i].damage * debuffs[0].value / 100);	// SZ√ñRNY SEBZ√âS N√ñVEL√âS
							}
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\x1b[2K";
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\t\t\t\t" << debuffs[0].name << "kiv√°lasztva!" << endl;
							debuffs.erase(debuffs.begin());							// V√°laszt√°s ut√°n a gyeng√≠t√©s t√∂rl√©se a vektorb√≥l, hogy ne ism√©tl≈ëdj√∂n k√©s≈ëbb
							itemPicked=true;
						} break;
						case UP:{			// M√°sodik gyeng√≠t√©s v√°laszt√°sa
							player.keys++;
							switch(debuffs[1].type){
								case 1: player.health = (player.health * debuffs[1].value / 100);				// J√ÅT√âKOS √âLET CS√ñKKENT√âS
								case 2: player.damage = (player.damage * debuffs[1].value / 100);				// J√ÅT√âKOS SEBZ√âS CS√ñKKENT√âS
								case 3: dodgeChance = (dodgeChance * debuffs[1].value / 100);					// J√ÅT√âKOS KIT√âR√âS CS√ñKKENT√âS
								case 4: player.armor = (player.armor * debuffs[1].value / 100);					// J√ÅT√âKOS P√ÅNC√âL CS√ñKKENT√âS
								case 5: allBosses[i].health = (allBosses[i].health * debuffs[1].value / 100);	// SZ√ñRNY √âLET N√ñVEL√âS
								case 6: allBosses[i].damage = (allBosses[i].damage * debuffs[1].value / 100);	// SZ√ñRNY SEBZ√âS N√ñVEL√âS
							}
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\x1b[2K";
							setCursorPosition(0,(debuffsASCII*3) + 31);
							debuffs.erase(debuffs.begin()+1);
							itemPicked=true;
						} break;
						case RIGHT: {		// Harmadik gyeng√≠t√©s v√°laszt√°sa
							player.keys++;
							switch(debuffs[2].type){
								case 1: player.health = (player.health * debuffs[2].value / 100);				// J√ÅT√âKOS √âLET CS√ñKKENT√âS
								case 2: player.damage = (player.damage * debuffs[2].value / 100);				// J√ÅT√âKOS SEBZ√âS CS√ñKKENT√âS
								case 3: dodgeChance = (dodgeChance * debuffs[2].value / 100);					// J√ÅT√âKOS KIT√âR√âS CS√ñKKENT√âS
								case 4: player.armor = (player.armor * debuffs[2].value / 100);					// J√ÅT√âKOS P√ÅNC√âL CS√ñKKENT√âS
								case 5: allBosses[i].health = (allBosses[i].health * debuffs[2].value / 100);	// SZ√ñRNY √âLET N√ñVEL√âS
								case 6: allBosses[i].damage = (allBosses[i].damage * debuffs[2].value / 100);	// SZ√ñRNY SEBZ√âS N√ñVEL√âS
							}
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\x1b[2K";
							setCursorPosition(0,(debuffsASCII*3) + 31);
							debuffs.erase(debuffs.begin()+2);
							itemPicked=true;
						} break;
						case ESC: return 0; break;	// ESC-re le√°ll a program
						default: {					// Ha a felsorolt gombok k√∂z√ºl egyiket sem nyomja meg a felhaszn√°l√≥, hiba√ºzenetet kap
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\x1b[2K";
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "Helytelen input!" << endl;
							Sleep(1500);
							setCursorPosition(0,(debuffsASCII*3) + 31);
							cout << "\x1b[2K";
						} break;
						
				}
				} while (!itemPicked);
				shuffleArray(debuffs);	// Gyeng√≠t√©seket t√°rol√≥ vektor √∂sszekever√©se, hogy a k√∂vetkez≈ë megnyit√°skor ne ism√©tl≈ëdjenek
				Sleep(2000);
				setCursorPosition(0,0);
			}
			else if (pickDoor == ESC) {system("cls"); return 0;}	// ESC-re le√°ll a program
			else {						// Ha nem siker√ºlt helyes gombot lenyomni
			SetConsoleOutputCP(1250);
			cout << "\t" << playerName;
			SetConsoleOutputCP(65001);
			cout << ", v√°lassz ajt√≥t jobb, illetve bal nyilak valamelyik√©nek lenyom√°s√°val!";
			Sleep(2000);
			}
			} while (!itemPicked);	// do-while ciklus v√©ge (kij√°rat)
		}
			
		// ----Jobb ajt√≥ v√°laszt√°sa (harc)----
		else if(pressedChar == RIGHT && i < allBosses.size()){	
			setCursorPosition(0,0);	
			readFile("../txtFiles/doorsRight.txt", 7, "\t\t\t\t");
			Sleep(2000);
			system("cls");
			bossHeight = allBosses[i].getBoss(allBosses[i].fileName, allBosses[i].color, bossHeight);	// Megfelel≈ë sz√∂rny megjelen√≠t√©se, ASCII art sorainak sz√°m√°nak elt√°rol√°sa
			int middlePoint = allBosses[i].middlePoint();
			setCursorPosition(middlePoint, bossHeight);
			cout << "\n\t\t\t\t\t\t" << allBosses[i].name << "\n" << endl;
			setCursorPosition(0,bossHeight+4);
			displayStats(allBosses, player, i, dodgePercent);					// J√°t√©kos √©s sz√∂rny tulajdons√°gok megjelen√≠t√©se
				do
				{	
					BlockInput(false);							// User input enged√©lyez√©se, hogy ism√©t lehessen v√°lasztani
					combatOption = _getch();					// V√°ltoz√≥ a harc k√∂zben lenyomhat√≥ billenty≈±kre
					BlockInput(true);							/* User input megsz≈±ntet√©se (az√©rt, hogy tudjon automatikusan m≈±k√∂dni a harc,
														   		   ne l√©pjen fel semmi furcsa jelens√©g, ha a felhaszn√°l√≥ nyomkodja a gombokat) */
					if (combatOption == 0 || combatOption == 0xE0) combatOption = _getch();
					if (combatOption == RIGHT && i < allBosses.size()){ 		// Jobb ny√≠l lenyom√°sa (t√°mad√°s)
						setCursorPosition(0,bossHeight+8);
						cout << "\tT√°mad√°s!!!" << endl;
						Sleep(1000);
						if((allBosses[i].health - player.damage) > 0){
							allBosses[i].health -= player.damage;				// T√°mad√°s ut√°n a sz√∂rny √©letet vesz√≠t
						}	
						else{
							allBosses[i].health = 0;
							newLine();
							int goldWon = generateNum(500,750);
							player.gold += goldWon;									// J√°t√©kos kap 500-750 aranyat a gy≈ëzelem√©rt
							int keyChance = generateNum(1,100);						// Sz√°m gener√°l√°s 1 √©s 100 k√∂z√∂tt
							bool giveKey;
							keyChance % 2 == 0 ? giveKey = true : giveKey = false;	// A gener√°lt sz√°m ellen≈ërz√©se
							giveKey ? player.keys += 1 : player.keys += 0;			// Ha a gener√°lt sz√°m p√°ros, a j√°t√©kos kap kulcsot (50% es√©ly)
							cout << "\tGratul√°lok! Legy≈ëzted a sz√∂rnyet!" << endl;
							newLine();
							if(giveKey){
								cout << "\t" << goldWon << " aranyat √©s 1 kulcsot nyert√©l!" << endl; 
							}
							else{
							cout << "\t" << goldWon << " aranyat nyert√©l!" << endl;
							}
							Sleep(4000);
							break;		
						}
						
						setCursorPosition(0,bossHeight+5);
						cout << "\x1b[2K";
						setCursorPosition(0,bossHeight+6);
						cout << "\x1b[2K";
						setCursorPosition(0,bossHeight+3);
						displayStats(allBosses, player, i, dodgePercent);
						setCursorPosition(0,bossHeight+10);
						cout << "\t" << player.damage << " sebz√©st okozt√°l!" << endl;
						Sleep(1000);
						if (allBosses[i].health > 0) {											// Ha a sz√∂rnynek maradt √©lete, t√°madjon vissza, ha nincs, akkor a j√°t√©kos gy≈ëz≈ëtt
						setCursorPosition(0, bossHeight+8);
						cout << "\tSz√∂rny t√°mad!" << endl;
						Sleep(1000);
						if(player.health - (allBosses[i].damage - player.armor) > 0) {
							player.health -= (allBosses[i].damage - player.armor); 			// J√°t√©kos √©letet vesz√≠t (sz√∂rny sebz√©se - j√°t√©kos p√°nc√©lja)
							}
							else {
								player.health = 0;
								Sleep(2000);
								cout << "Game over!" << endl;
								gameOver = true;
								break;
							}	
						setCursorPosition(0,bossHeight+5);
						cout << "\x1b[2K";
						setCursorPosition(0,bossHeight+6);
						cout << "\x1b[2K";
						setCursorPosition(0,bossHeight+3);
						displayStats(allBosses, player, i, dodgePercent);
						setCursorPosition(0,bossHeight+10);
						cout << "\t" << allBosses[i].damage - player.armor << " sebz√©st szenvedt√©l!" << endl;	// Elvesz√≠tett √©let pontok ki√≠r√°sa
						Sleep(1000);
						setCursorPosition(0,bossHeight+8);
						cout << "\x1b[2K";
						setCursorPosition(0,bossHeight+10);
						cout << "\x1b[2K";
						}
					}													// Ha a sz√∂rny √©lete <= 0, a j√°t√©kos gy≈ëz√∂tt
				
					else if(combatOption == LEFT && i < allBosses.size()){		// Bal ny√≠l lenyom√°sa, kit√©r√©s a sz√∂rny el≈ël
						int chance = generateNum(0, dodgeChance);				// Sz√°m gener√°l√°sa 0 √©s dodgeChance (150) k√∂z√∂tt, k√©s≈ëbb v√°ltozhat
						bool runAway;
						chance % 5 == 0 ? runAway = true : runAway = false;		// Ha a gener√°lt sz√°m oszthat√≥ 5-tel, a j√°t√©kos kit√©ra sz√∂rny el≈ël (kezdetben 20% es√©ly, k√©s≈ëbb v√°ltozhat)
						if(runAway){											// Ha sikeres a kit√©r√©s, kil√©p√©s a harcb√≥l, f≈ëciklus elej√©re ugr√°s
							setCursorPosition(0,bossHeight+8);
							cout << "\tSikeres kit√©r√©s!" << endl;
							Sleep(2000);
							break;	
						}
						else{													// Ha nem siker√ºlt a kit√©r√©s, a sz√∂rny t√°mad
							setCursorPosition(0,bossHeight+8);
							cout << "\tSikertelen kit√©r√©s!" << endl;
							Sleep(1000);
							setCursorPosition(0,bossHeight+8);
							cout << "\x1b[2K";
							setCursorPosition(0,bossHeight+8);
							cout << "\tSz√∂rny t√°mad!" << endl;
							Sleep(1000);
							if(player.health - (allBosses[i].damage - player.armor) > 0) {
							player.health -= (allBosses[i].damage - player.armor);
							}
							else {
								player.health = 0;
								Sleep(2000);
								cout << "Game over!" << endl;
								gameOver = true;
								break;
							}
							setCursorPosition(0,bossHeight+5);
							cout << "\x1b[2K";
							setCursorPosition(0,bossHeight+6);
							cout << "\x1b[2K";
							setCursorPosition(0,bossHeight+3);
							displayStats(allBosses, player, i, dodgePercent);
							setCursorPosition(0,bossHeight+10);
							cout << "\t" << allBosses[i].damage - player.armor << " sebz√©st szenvedt√©l!" << endl;
							Sleep(1000);
							setCursorPosition(0,bossHeight+8);
							cout << "\x1b[2K";
							setCursorPosition(0,bossHeight+10);
							cout << "\x1b[2K";
						}
					}
					else if(combatOption == ESC) {								// ESC-re kil√©p a program (harc k√∂zben is)
						system("cls");
						return 0;
						}		
					else {														// Ha a felsorolt gombok k√∂z√ºl egyiket sem nyomta le a felhaszn√°l√≥, hiba√ºzenetet kap
						setCursorPosition(0,bossHeight+10);
						SetConsoleOutputCP(1250);
						cout << "\t" << playerName;
						SetConsoleOutputCP(65001);
						cout << ", a folytat√°shoz nyomd le a fent l√°that√≥ gombok egyik√©t!" << endl;
						Sleep(2000);
					}
				} while ((player.health >= 0) && (allBosses[i].health >= 0));	// Ha mind k√©t f√©lnek maradt √©lete, folytat√≥dhat a harc
			i++;																// A harcnak v√©ge, ciklusv√°ltoz√≥ n≈ë 1-gyel (az√©rt, hogy a k√∂vetkez≈ë harcban m√°s sz√∂rny legyen)
		}
		else if(pressedChar == ESC) {system("cls"); return 0;}					// ESC-re kil√©p a program
		else {																	// Ha nem siker√ºlt helyes gombot lenyomni
			SetConsoleOutputCP(1250);
			cout << playerName;
			SetConsoleOutputCP(65001);
			cout << "v√°lassz ajt√≥t jobb, illetve bal nyilak valamelyik√©nek lenyom√°s√°val!";
			Sleep(2000);
			}
	} while (!gameOver);		
													// Ha a v√°ltoz√≥ hamis, folytat√≥dhat a j√°t√©k, ha a v√°ltoz√≥ igaz, kil√©p√©s a ciklusb√≥l, a program le√°ll
	if(gameOver && i < allBosses.size()){
		system("cls");
		readFile("../txtFiles/lose.txt", 7);
		_getch();
	}
	else if(gameOver && i > allBosses.size()){
		system("cls");
		readFile("../txtFiles/victory.txt", 7);
		_getch();
	}																			
	return 0;																	
}